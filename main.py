import os
import logging
import random
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler,
    ConversationHandler
)
from dotenv import load_dotenv
import json
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
SET_TEMP_WATER, SET_TEMP_AIR, SET_WATER_LEAK = range(3)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('Your_Token')
WEBSITE_URL = os.getenv('WEBSITE_URL', 'https://meali09.github.io/aquarium/')
GITHUB_TOKEN = os.getenv('Your_Token')
GITHUB_REPO = os.getenv('GITHUB_REPO', 'meali09/aquarium')
DATA_FILE_PATH = os.getenv('DATA_FILE_PATH', 'data/status.json')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫–≤–∞—Ä–∏—É–º–∞
aquarium_params = {
    'auto_temp_water': 24.5,
    'auto_temp_air': 22.0,
    'auto_water_leak': 0,
    'manual_temp_water': None,
    'manual_temp_air': None,
    'manual_water_leak': None,
    'light_on': False,
    'feeding_time': '12:00',
    'ph_level': 7.0,
    'filter_on': True,
    'water_level': 'normal'
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def update_github_data():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ GitHub —á–µ—Ä–µ–∑ API"""
    if not all([GITHUB_TOKEN, GITHUB_REPO]):
        logger.warning("GitHub credentials not configured, skipping update")
        return

    current = get_current_values()
    data = {
        'temp_water': current['temp_water'],
        'temp_air': current['temp_air'],
        'water_leak': current['water_leak'],
        'light_on': current['light_on'],
        'feeding_time': current['feeding_time'],
        'ph_level': current['ph_level'],
        'filter_on': current['filter_on'],
        'water_level': current['water_level'],
        'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }

    url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{DATA_FILE_PATH}"
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SHA
        response = requests.get(url, headers=headers)
        sha = response.json().get('sha') if response.status_code == 200 else None

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        payload = {
            "message": "Update aquarium status",
            "content": json.dumps(data, indent=2).encode('base64').decode('utf-8'),
            "sha": sha
        }

        response = requests.put(url, headers=headers, json=payload)
        if response.status_code == 200:
            logger.info("Data successfully updated on GitHub")
        else:
            logger.error(f"Failed to update GitHub data: {response.text}")
    except Exception as e:
        logger.error(f"Error updating GitHub data: {str(e)}")

def update_sensor_values():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º"""
    aquarium_params['auto_temp_water'] = round(24.0 + random.uniform(-0.5, 0.5), 1)
    aquarium_params['auto_temp_air'] = round(22.0 + random.uniform(-1, 1), 1)
    aquarium_params['auto_water_leak'] = 1 if random.random() < 0.01 else 0
    update_github_data()

def get_current_values():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    return {
        'temp_water': aquarium_params['manual_temp_water'] or aquarium_params['auto_temp_water'],
        'temp_air': aquarium_params['manual_temp_air'] or aquarium_params['auto_temp_air'],
        'water_leak': aquarium_params['manual_water_leak'] or aquarium_params['auto_water_leak'],
        'light_on': aquarium_params['light_on'],
        'feeding_time': aquarium_params['feeding_time'],
        'ph_level': aquarium_params['ph_level'],
        'filter_on': aquarium_params['filter_on'],
        'water_level': aquarium_params['water_level']
    }

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã", callback_data='temp_water'),
         InlineKeyboardButton("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞", callback_data='temp_air')],
        [InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ—Ç–µ—á–∫–∞ –≤–æ–¥—ã", callback_data='water_leak')],
        [InlineKeyboardButton("üí° –û—Å–≤–µ—â–µ–Ω–∏–µ", callback_data='light')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data='status')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='refresh')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_light_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏–µ–º"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí° –í–∫–ª—é—á–∏—Ç—å", callback_data='light_on'),
         InlineKeyboardButton("üîå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='light_off')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back')]
    ])

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–º–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º!", reply_markup=get_main_keyboard())

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    values = get_current_values()
    text = (
        f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n"
        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {values['temp_water']}¬∞C\n"
        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {values['temp_air']}¬∞C\n"
        f"‚ö†Ô∏è –ü—Ä–æ—Ç–µ—á–∫–∞ –≤–æ–¥—ã: {'–î–∞' if values['water_leak'] else '–ù–µ—Ç'}\n"
        f"üí° –û—Å–≤–µ—â–µ–Ω–∏–µ: {'–í–∫–ª' if values['light_on'] else '–í—ã–∫–ª'}\n"
        f"üïí –ö–æ—Ä–º–ª–µ–Ω–∏–µ: {values['feeding_time']}\n"
        f"üåä –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: {values['water_level']}\n"
        f"üß™ pH —É—Ä–æ–≤–µ–Ω—å: {values['ph_level']}\n"
        f"üåÄ –§–∏–ª—å—Ç—Ä: {'–†–∞–±–æ—Ç–∞–µ—Ç' if values['filter_on'] else '–û—Ç–∫–ª—é—á–µ–Ω'}"
    )
    await update.message.reply_text(text, reply_markup=get_main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'temp_water':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã (15‚Äì35¬∞C):")
        return SET_TEMP_WATER
    elif data == 'temp_air':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–∑–¥—É—Ö–∞ (10‚Äì35¬∞C):")
        return SET_TEMP_AIR
    elif data == 'water_leak':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–µ—á–∫–∏ (0 –∏–ª–∏ 1):")
        return SET_WATER_LEAK
    elif data == 'light':
        await query.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º:", reply_markup=get_light_keyboard())
    elif data == 'light_on':
        aquarium_params['light_on'] = True
        update_github_data()
        await query.edit_message_text("–û—Å–≤–µ—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", reply_markup=get_light_keyboard())
    elif data == 'light_off':
        aquarium_params['light_on'] = False
        update_github_data()
        await query.edit_message_text("–û—Å–≤–µ—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", reply_markup=get_light_keyboard())
    elif data == 'status':
        await status(update, context)
    elif data == 'refresh':
        update_sensor_values()
        await query.edit_message_text("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=get_main_keyboard())
    elif data == 'back':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

async def set_temp_water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã"""
    try:
        temp = float(update.message.text)
        if 15 <= temp <= 35:
            aquarium_params['manual_temp_water'] = temp
            update_github_data()
            await update.message.reply_text(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}¬∞C", reply_markup=get_main_keyboard())
            return ConversationHandler.END
        else:
            await update.message.reply_text("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –¥–æ 35¬∞C:")
            return SET_TEMP_WATER
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 25.0:")
        return SET_TEMP_WATER

async def set_temp_air(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–∑–¥—É—Ö–∞"""
    try:
        temp = float(update.message.text)
        if 10 <= temp <= 35:
            aquarium_params['manual_temp_air'] = temp
            update_github_data()
            await update.message.reply_text(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}¬∞C", reply_markup=get_main_keyboard())
            return ConversationHandler.END
        else:
            await update.message.reply_text("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 35¬∞C:")
            return SET_TEMP_AIR
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 22.5:")
        return SET_TEMP_AIR

async def set_water_leak(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ç–µ—á–∫–∏ –≤–æ–¥—ã"""
    try:
        leak = int(update.message.text)
        if leak in (0, 1):
            aquarium_params['manual_water_leak'] = leak
            update_github_data()
            await update.message.reply_text(f"–ü—Ä–æ—Ç–µ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {'–î–∞' if leak else '–ù–µ—Ç'}", reply_markup=get_main_keyboard())
            return ConversationHandler.END
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 0 (–Ω–µ—Ç) –∏–ª–∏ 1 (–µ—Å—Ç—å):")
            return SET_WATER_LEAK
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ 1:")
        return SET_WATER_LEAK

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN not configured!")
        return

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    conv_handler = ConversationHandler(
        entry_points=[],
        states={
            SET_TEMP_WATER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_temp_water)],
            SET_TEMP_AIR: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_temp_air)],
            SET_WATER_LEAK: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_water_leak)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
